{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { POSTS_URL } from '../../config/app-config';\nimport { fetchJson } from '../../utils/fetch-json';\nimport { markdownToHtml } from '../../utils/markdown-to-html';\nexport const getPost = async slug => {\n  const slugString = Array.isArray(slug) ? slug[0] : slug;\n  const url = `${POSTS_URL}?slug=${slugString}`;\n  const jsonPosts = await fetchJson(url);\n  if (!jsonPosts.length) return jsonPosts;\n  const content = await markdownToHtml(jsonPosts[0].content);\n\n  const finalContent = _objectSpread(_objectSpread({}, jsonPosts[0]), {}, {\n    content\n  });\n\n  return [finalContent];\n};","map":{"version":3,"sources":["/Users/adercidepaulajunior/Udemy/blog/blog_next/src/data/posts/get-post.ts"],"names":["POSTS_URL","fetchJson","markdownToHtml","getPost","slug","slugString","Array","isArray","url","jsonPosts","length","content","finalContent"],"mappings":";;;;;;AAAA,SAASA,SAAT,QAA0B,yBAA1B;AAEA,SAASC,SAAT,QAA0B,wBAA1B;AACA,SAASC,cAAT,QAA+B,8BAA/B;AAEA,OAAO,MAAMC,OAAO,GAAG,MAAOC,IAAP,IAAwD;AAC7E,QAAMC,UAAU,GAAGC,KAAK,CAACC,OAAN,CAAcH,IAAd,IAAsBA,IAAI,CAAC,CAAD,CAA1B,GAAgCA,IAAnD;AACA,QAAMI,GAAG,GAAI,GAAER,SAAU,SAAQK,UAAW,EAA5C;AACA,QAAMI,SAAS,GAAG,MAAMR,SAAS,CAAaO,GAAb,CAAjC;AAEA,MAAI,CAACC,SAAS,CAACC,MAAf,EAAuB,OAAOD,SAAP;AAEvB,QAAME,OAAO,GAAG,MAAMT,cAAc,CAACO,SAAS,CAAC,CAAD,CAAT,CAAaE,OAAd,CAApC;;AACA,QAAMC,YAAY,mCAAQH,SAAS,CAAC,CAAD,CAAjB;AAAsBE,IAAAA;AAAtB,IAAlB;;AACA,SAAO,CAACC,YAAD,CAAP;AACD,CAVM","sourcesContent":["import { POSTS_URL } from '../../config/app-config';\nimport { PostData } from '../../domain/posts/post';\nimport { fetchJson } from '../../utils/fetch-json';\nimport { markdownToHtml } from '../../utils/markdown-to-html';\n\nexport const getPost = async (slug: string | string[]): Promise<PostData[]> => {\n  const slugString = Array.isArray(slug) ? slug[0] : slug;\n  const url = `${POSTS_URL}?slug=${slugString}`;\n  const jsonPosts = await fetchJson<PostData[]>(url);\n\n  if (!jsonPosts.length) return jsonPosts;\n\n  const content = await markdownToHtml(jsonPosts[0].content);\n  const finalContent = { ...jsonPosts[0], content };\n  return [finalContent];\n};\n"]},"metadata":{},"sourceType":"module"}