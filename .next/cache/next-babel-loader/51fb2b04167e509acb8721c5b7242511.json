{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { useRouter } from 'next/router';\nimport HomePage from '../../../containers/HomePage';\nimport { countAllPosts } from '../../../data/posts/count-all-posts';\nimport { getAllPosts } from '../../../data/posts/get-all-posts';\nexport default function Page({\n  posts,\n  category,\n  pagination\n}) {\n  const router = useRouter();\n  if (router.isFallback) return __jsx(\"div\", null, \"Carregando...\");\n  if (!posts.length) return __jsx(\"div\", null, \"P\\xE1gina n\\xE3o encontrada...\");\n  return __jsx(HomePage, {\n    posts: posts,\n    category: category,\n    pagination: pagination\n  });\n}\nexport const getStaticPaths = async () => {\n  return {\n    paths: [],\n    fallback: true\n  };\n};\nexport const getStaticProps = async ctx => {\n  const page = Number(ctx.params.param[0]);\n  const category = ctx.params.param[1] || '';\n  const postsPerPage = 9;\n  const startFrom = (page - 1) * postsPerPage;\n  const nextPage = page + 1;\n  const previousPage = page - 1;\n  const categoryQuery = category ? `&category.name_contains=${category}` : '';\n  const urlQuery = `_sort=id:desc&_start=${startFrom}&_limit=${postsPerPage}${categoryQuery}`;\n  const posts = await getAllPosts(urlQuery);\n  const numberOfPosts = Number(await countAllPosts(categoryQuery));\n  const pagination = {\n    nextPage,\n    numberOfPosts,\n    postsPerPage,\n    previousPage,\n    category\n  };\n  return {\n    props: {\n      posts,\n      pagination,\n      category\n    } // revalidate: 600,  // Eu n√£o preciso atualizar este blog (por isso comentei)\n\n  };\n};","map":null,"metadata":{},"sourceType":"module"}