{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { POSTS_URL } from '../../config/app-config';\nimport { fetchJson } from '../../utils/fetch-json';\nimport { markdownToHtml } from '../../utils/markdown-to-html';\nexport const getPost = async slug => {\n  const slugString = Array.isArray(slug) ? slug[0] : slug;\n  const url = `${POSTS_URL}?slug=${slugString}`;\n  const jsonPosts = await fetchJson(url);\n  if (!jsonPosts.length) return jsonPosts;\n  const content = await markdownToHtml(jsonPosts[0].content);\n\n  const finalContent = _objectSpread(_objectSpread({}, jsonPosts[0]), {}, {\n    content\n  });\n\n  return [finalContent];\n};","map":null,"metadata":{},"sourceType":"module"}